<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ThreadReadsTest extends TestCase
{
    use RefreshDatabase;

    protected $thread;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = create(\App\Thread::class);
    }

    /** @test */
    public function a_user_can_view_all_threads()
    {

        $this->get('/threads')
            ->assertSee($this->thread->title);
    }

    /** @test */
    public function a_user_can_view_single_thread(){

        $this->get($this->thread->path())
           ->assertSee($this->thread->title);
    }

    /** @test */
    public function a_user_can_view_replies_with_a_thread(){

        $reply = create(\App\Reply::class, ['thread_id' => $this->thread->id]);

        $this->get($this->thread->path())
            ->assertSee($reply->title);
    }

    /** @test */
    public function a_user_can_filter_threads_on_tags()
    {
        $channel = create('App\Channel');
        $threadInChannel = create('App\Thread', ['channel_id' => $channel->id]);
        $this->get("/threads/{$channel->slug}")
            ->assertSee($threadInChannel->title)
            ->assertDontSee($this->thread->title);
    }

    /** @test */
    public function a_user_can_filter_threads_by_username()
    {
        $this->signIn($user = create('App\User', ['name'=>'alexneo68']));
        $threadWithUser = create('App\Thread', ['user_id'=>$user->id]);
        $threadWithoutUser = create('App\Thread');
        $this->get("threads?by={$user->name}")
            ->assertSee($threadWithUser->title)
            ->assertDontSee($threadWithoutUser->title);
    }
}
